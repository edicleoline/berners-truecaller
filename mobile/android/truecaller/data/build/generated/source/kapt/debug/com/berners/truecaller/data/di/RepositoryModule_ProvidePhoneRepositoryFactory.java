// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import com.berners.truecaller.data.local.datasources.LocalPhoneDataSource;
import com.berners.truecaller.data.remote.datasources.RemotePhoneDataSource;
import com.berners.truecaller.data.repositories.PhoneRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidePhoneRepositoryFactory implements Factory<PhoneRepository> {
  private final RepositoryModule module;

  private final Provider<RemotePhoneDataSource> remotePhoneDataSourceProvider;

  private final Provider<LocalPhoneDataSource> localPhoneDataSourceProvider;

  public RepositoryModule_ProvidePhoneRepositoryFactory(RepositoryModule module,
      Provider<RemotePhoneDataSource> remotePhoneDataSourceProvider,
      Provider<LocalPhoneDataSource> localPhoneDataSourceProvider) {
    this.module = module;
    this.remotePhoneDataSourceProvider = remotePhoneDataSourceProvider;
    this.localPhoneDataSourceProvider = localPhoneDataSourceProvider;
  }

  @Override
  public PhoneRepository get() {
    return providePhoneRepository(module, remotePhoneDataSourceProvider.get(), localPhoneDataSourceProvider.get());
  }

  public static RepositoryModule_ProvidePhoneRepositoryFactory create(RepositoryModule module,
      Provider<RemotePhoneDataSource> remotePhoneDataSourceProvider,
      Provider<LocalPhoneDataSource> localPhoneDataSourceProvider) {
    return new RepositoryModule_ProvidePhoneRepositoryFactory(module, remotePhoneDataSourceProvider, localPhoneDataSourceProvider);
  }

  public static PhoneRepository providePhoneRepository(RepositoryModule instance,
      RemotePhoneDataSource remotePhoneDataSource, LocalPhoneDataSource localPhoneDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.providePhoneRepository(remotePhoneDataSource, localPhoneDataSource));
  }
}
