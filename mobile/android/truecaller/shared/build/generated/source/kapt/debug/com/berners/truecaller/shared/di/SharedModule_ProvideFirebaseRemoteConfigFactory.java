// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.shared.di;

import com.google.firebase.remoteconfig.FirebaseRemoteConfig;
import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SharedModule_ProvideFirebaseRemoteConfigFactory implements Factory<FirebaseRemoteConfig> {
  private final SharedModule module;

  private final Provider<FirebaseRemoteConfigSettings> configSettingsProvider;

  public SharedModule_ProvideFirebaseRemoteConfigFactory(SharedModule module,
      Provider<FirebaseRemoteConfigSettings> configSettingsProvider) {
    this.module = module;
    this.configSettingsProvider = configSettingsProvider;
  }

  @Override
  public FirebaseRemoteConfig get() {
    return provideFirebaseRemoteConfig(module, configSettingsProvider.get());
  }

  public static SharedModule_ProvideFirebaseRemoteConfigFactory create(SharedModule module,
      Provider<FirebaseRemoteConfigSettings> configSettingsProvider) {
    return new SharedModule_ProvideFirebaseRemoteConfigFactory(module, configSettingsProvider);
  }

  public static FirebaseRemoteConfig provideFirebaseRemoteConfig(SharedModule instance,
      FirebaseRemoteConfigSettings configSettings) {
    return Preconditions.checkNotNullFromProvides(instance.provideFirebaseRemoteConfig(configSettings));
  }
}
