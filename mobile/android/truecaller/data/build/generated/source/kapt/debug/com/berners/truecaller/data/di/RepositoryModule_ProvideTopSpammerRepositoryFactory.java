// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import com.berners.truecaller.data.local.datasources.LocalTopSpammerDataSource;
import com.berners.truecaller.data.remote.datasources.RemoteTopSpammerDataSource;
import com.berners.truecaller.data.repositories.TopSpammerRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideTopSpammerRepositoryFactory implements Factory<TopSpammerRepository> {
  private final RepositoryModule module;

  private final Provider<RemoteTopSpammerDataSource> remoteTopSpammerDataSourceProvider;

  private final Provider<LocalTopSpammerDataSource> localTopSpammerDataSourceProvider;

  public RepositoryModule_ProvideTopSpammerRepositoryFactory(RepositoryModule module,
      Provider<RemoteTopSpammerDataSource> remoteTopSpammerDataSourceProvider,
      Provider<LocalTopSpammerDataSource> localTopSpammerDataSourceProvider) {
    this.module = module;
    this.remoteTopSpammerDataSourceProvider = remoteTopSpammerDataSourceProvider;
    this.localTopSpammerDataSourceProvider = localTopSpammerDataSourceProvider;
  }

  @Override
  public TopSpammerRepository get() {
    return provideTopSpammerRepository(module, remoteTopSpammerDataSourceProvider.get(), localTopSpammerDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideTopSpammerRepositoryFactory create(RepositoryModule module,
      Provider<RemoteTopSpammerDataSource> remoteTopSpammerDataSourceProvider,
      Provider<LocalTopSpammerDataSource> localTopSpammerDataSourceProvider) {
    return new RepositoryModule_ProvideTopSpammerRepositoryFactory(module, remoteTopSpammerDataSourceProvider, localTopSpammerDataSourceProvider);
  }

  public static TopSpammerRepository provideTopSpammerRepository(RepositoryModule instance,
      RemoteTopSpammerDataSource remoteTopSpammerDataSource,
      LocalTopSpammerDataSource localTopSpammerDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideTopSpammerRepository(remoteTopSpammerDataSource, localTopSpammerDataSource));
  }
}
