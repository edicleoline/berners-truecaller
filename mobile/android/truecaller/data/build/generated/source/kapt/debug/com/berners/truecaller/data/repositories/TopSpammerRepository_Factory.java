// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.repositories;

import com.berners.truecaller.data.datasources.TopSpammerDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class TopSpammerRepository_Factory implements Factory<TopSpammerRepository> {
  private final Provider<TopSpammerDataSource> remoteTopSpammerDataSourceProvider;

  private final Provider<TopSpammerDataSource> localTopSpammerDataSourceProvider;

  public TopSpammerRepository_Factory(
      Provider<TopSpammerDataSource> remoteTopSpammerDataSourceProvider,
      Provider<TopSpammerDataSource> localTopSpammerDataSourceProvider) {
    this.remoteTopSpammerDataSourceProvider = remoteTopSpammerDataSourceProvider;
    this.localTopSpammerDataSourceProvider = localTopSpammerDataSourceProvider;
  }

  @Override
  public TopSpammerRepository get() {
    return newInstance(remoteTopSpammerDataSourceProvider.get(), localTopSpammerDataSourceProvider.get());
  }

  public static TopSpammerRepository_Factory create(
      Provider<TopSpammerDataSource> remoteTopSpammerDataSourceProvider,
      Provider<TopSpammerDataSource> localTopSpammerDataSourceProvider) {
    return new TopSpammerRepository_Factory(remoteTopSpammerDataSourceProvider, localTopSpammerDataSourceProvider);
  }

  public static TopSpammerRepository newInstance(TopSpammerDataSource remoteTopSpammerDataSource,
      TopSpammerDataSource localTopSpammerDataSource) {
    return new TopSpammerRepository(remoteTopSpammerDataSource, localTopSpammerDataSource);
  }
}
