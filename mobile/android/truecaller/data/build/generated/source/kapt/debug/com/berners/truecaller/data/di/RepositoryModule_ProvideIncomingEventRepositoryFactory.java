// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import com.berners.truecaller.data.local.datasources.LocalIncomingEventDataSource;
import com.berners.truecaller.data.repositories.IncomingEventRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideIncomingEventRepositoryFactory implements Factory<IncomingEventRepository> {
  private final RepositoryModule module;

  private final Provider<LocalIncomingEventDataSource> localIncomingStateDataSourceProvider;

  public RepositoryModule_ProvideIncomingEventRepositoryFactory(RepositoryModule module,
      Provider<LocalIncomingEventDataSource> localIncomingStateDataSourceProvider) {
    this.module = module;
    this.localIncomingStateDataSourceProvider = localIncomingStateDataSourceProvider;
  }

  @Override
  public IncomingEventRepository get() {
    return provideIncomingEventRepository(module, localIncomingStateDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideIncomingEventRepositoryFactory create(
      RepositoryModule module,
      Provider<LocalIncomingEventDataSource> localIncomingStateDataSourceProvider) {
    return new RepositoryModule_ProvideIncomingEventRepositoryFactory(module, localIncomingStateDataSourceProvider);
  }

  public static IncomingEventRepository provideIncomingEventRepository(RepositoryModule instance,
      LocalIncomingEventDataSource localIncomingStateDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideIncomingEventRepository(localIncomingStateDataSource));
  }
}
