// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import com.berners.truecaller.data.remote.datasources.RemoteUserDataSource;
import com.berners.truecaller.data.remote.services.UserService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideUserDataSourceFactory implements Factory<RemoteUserDataSource> {
  private final RemoteModule module;

  private final Provider<UserService> serviceProvider;

  public RemoteModule_ProvideUserDataSourceFactory(RemoteModule module,
      Provider<UserService> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public RemoteUserDataSource get() {
    return provideUserDataSource(module, serviceProvider.get());
  }

  public static RemoteModule_ProvideUserDataSourceFactory create(RemoteModule module,
      Provider<UserService> serviceProvider) {
    return new RemoteModule_ProvideUserDataSourceFactory(module, serviceProvider);
  }

  public static RemoteUserDataSource provideUserDataSource(RemoteModule instance,
      UserService service) {
    return Preconditions.checkNotNullFromProvides(instance.provideUserDataSource(service));
  }
}
