// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.shared.domain.auth;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ObserveUserAuthStateUseCase_Factory implements Factory<ObserveUserAuthStateUseCase> {
  private final Provider<CoroutineScope> externalScopeProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  public ObserveUserAuthStateUseCase_Factory(Provider<CoroutineScope> externalScopeProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    this.externalScopeProvider = externalScopeProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
  }

  @Override
  public ObserveUserAuthStateUseCase get() {
    return newInstance(externalScopeProvider.get(), ioDispatcherProvider.get());
  }

  public static ObserveUserAuthStateUseCase_Factory create(
      Provider<CoroutineScope> externalScopeProvider,
      Provider<CoroutineDispatcher> ioDispatcherProvider) {
    return new ObserveUserAuthStateUseCase_Factory(externalScopeProvider, ioDispatcherProvider);
  }

  public static ObserveUserAuthStateUseCase newInstance(CoroutineScope externalScope,
      CoroutineDispatcher ioDispatcher) {
    return new ObserveUserAuthStateUseCase(externalScope, ioDispatcher);
  }
}
