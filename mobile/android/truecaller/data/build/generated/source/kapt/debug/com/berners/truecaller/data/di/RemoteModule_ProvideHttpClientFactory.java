// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteModule_ProvideHttpClientFactory implements Factory<OkHttpClient> {
  private final RemoteModule module;

  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public RemoteModule_ProvideHttpClientFactory(RemoteModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.module = module;
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideHttpClient(module, interceptorProvider.get());
  }

  public static RemoteModule_ProvideHttpClientFactory create(RemoteModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new RemoteModule_ProvideHttpClientFactory(module, interceptorProvider);
  }

  public static OkHttpClient provideHttpClient(RemoteModule instance,
      HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideHttpClient(interceptor));
  }
}
