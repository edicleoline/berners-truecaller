// Generated by Dagger (https://dagger.dev).
package com.berners.truecaller.data.di;

import com.berners.truecaller.data.local.datasources.LocalIncomingDataSource;
import com.berners.truecaller.data.repositories.IncomingRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideIncomingRepositoryFactory implements Factory<IncomingRepository> {
  private final RepositoryModule module;

  private final Provider<LocalIncomingDataSource> localIncomingDataSourceProvider;

  public RepositoryModule_ProvideIncomingRepositoryFactory(RepositoryModule module,
      Provider<LocalIncomingDataSource> localIncomingDataSourceProvider) {
    this.module = module;
    this.localIncomingDataSourceProvider = localIncomingDataSourceProvider;
  }

  @Override
  public IncomingRepository get() {
    return provideIncomingRepository(module, localIncomingDataSourceProvider.get());
  }

  public static RepositoryModule_ProvideIncomingRepositoryFactory create(RepositoryModule module,
      Provider<LocalIncomingDataSource> localIncomingDataSourceProvider) {
    return new RepositoryModule_ProvideIncomingRepositoryFactory(module, localIncomingDataSourceProvider);
  }

  public static IncomingRepository provideIncomingRepository(RepositoryModule instance,
      LocalIncomingDataSource localIncomingDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideIncomingRepository(localIncomingDataSource));
  }
}
